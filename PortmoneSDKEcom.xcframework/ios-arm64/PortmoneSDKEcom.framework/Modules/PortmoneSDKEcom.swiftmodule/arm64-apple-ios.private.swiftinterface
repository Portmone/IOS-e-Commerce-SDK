// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PortmoneSDKEcom
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import MessageUI
import PassKit
@_exported import PortmoneSDKEcom
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class BillsPaymentParams : ObjectiveC.NSObject {
  public var contractNumber: Swift.String
  public var paymentBills: [PortmoneSDKEcom.PaymentBill]
  public var billCurrency: PortmoneSDKEcom.Currency
  public var paymentFlowType: PortmoneSDKEcom.PaymentFlowType
  public var merchantIdentifier: Swift.String?
  @objc public init(contractNumber: Swift.String = "", paymentBills: [PortmoneSDKEcom.PaymentBill] = [], billCurrency: PortmoneSDKEcom.Currency = .uah, paymentFlowType: PortmoneSDKEcom.PaymentFlowType = .byCard, merchantIdentifier: Swift.String = "")
  public func validate() -> (any Swift.Error)?
  @objc deinit
}
@objc public class PreauthParams : ObjectiveC.NSObject {
  final public let payeeId: Swift.String
  final public let accountId: Swift.String
  final public let desc: Swift.String
  final public let billNumber: Swift.String
  final public let emailAddress: Swift.String
  @objc public init(payeeId: Swift.String, accountId: Swift.String = "", description: Swift.String = "", billNumber: Swift.String = "", emailAddress: Swift.String = "")
  public func validate() -> (any Swift.Error)?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class UBill : ObjectiveC.NSObject {
  final public let billId: Swift.String?
  public var status: Swift.String
  public var billAmount: Swift.Double
  public var paidAmount: Swift.Double
  public var commissionAmount: Swift.Double
  public var authCode: Swift.String?
  public var recieptUrl: Swift.String?
  final public let contractNumber: Swift.String?
  public var payDate: Swift.String?
  public var payeeName: Swift.String?
  public var errorMessage: Swift.String?
  @objc deinit
}
@objc public class SaveCardTokenBillParams : ObjectiveC.NSObject {
  final public let contractNumber: Swift.String
  final public let attribute1: Swift.String
  final public let language: Swift.String
  final public let payeeId: Swift.String
  final public let billNumber: Swift.String
  @objc public init(contractNumber: Swift.String = "", attribute1: Swift.String = "", language: Swift.String = "")
  public func validate() -> (any Swift.Error)?
  @objc deinit
}
@objc public class MerchantView : ObjectiveC.NSObject {
  final public let view: UIKit.UIView
  public var navigationTitle: Swift.String
  public var cardTextField: UIKit.UITextField
  public var expireTextField: UIKit.UITextField
  public var cvvTextField: UIKit.UITextField
  public var continueButton: UIKit.UIButton
  public var flowType: PortmoneSDKEcom.MerchantViewFlowType
  @objc public init(view: UIKit.UIView, navigationTitle: Swift.String, cardTextField: UIKit.UITextField, expireTextField: UIKit.UITextField, cvvTextField: UIKit.UITextField, continueButton: UIKit.UIButton, flowType: PortmoneSDKEcom.MerchantViewFlowType)
  @objc deinit
}
@objc public class PaymentBill : ObjectiveC.NSObject {
  final public let billId: Swift.String
  final public let billAmount: Swift.Double
  @objc public init(billId: Swift.String, billAmount: Swift.Double)
  public func validate() -> (any Swift.Error)?
  @objc deinit
}
@objc public class PaymentParams : ObjectiveC.NSObject {
  final public let desc: Swift.String
  final public let attribute1: Swift.String
  final public let attribute2: Swift.String
  final public let attribute3: Swift.String
  final public let attribute4: Swift.String
  final public let attribute5: Swift.String
  final public let billNumber: Swift.String
  public var contractNumber: Swift.String
  final public let preauthFlag: Swift.Bool
  public var billCurrency: PortmoneSDKEcom.Currency
  public var billAmount: Swift.Double
  public var billAmountWcvv: Swift.Double
  final public let payeeId: Swift.String
  final public let type: PortmoneSDKEcom.PaymentType
  public var paymentFlowType: PortmoneSDKEcom.PaymentFlowType
  public var merchantIdentifier: Swift.String?
  final public let emailAddress: Swift.String
  @objc public init(description: Swift.String = "", attribute1: Swift.String = "", attribute2: Swift.String = "", attribute3: Swift.String = "", attribute4: Swift.String = "", attribute5: Swift.String = "", billNumber: Swift.String = "", contractNumber: Swift.String = "", preauthFlag: Swift.Bool = false, billCurrency: PortmoneSDKEcom.Currency = .uah, billAmount: Swift.Double, billAmountWcvv: Swift.Double = 0, payeeId: Swift.String, type: PortmoneSDKEcom.PaymentType = .payment, merchantIdentifier: Swift.String = "", paymentFlowType: PortmoneSDKEcom.PaymentFlowType = .byCard, emailAddress: Swift.String = "")
  @objc public init(_ transferParams: PortmoneSDKEcom.TransferParams)
  public func validate() -> (any Swift.Error)?
  @objc deinit
}
@objc public protocol StyleSource {
  @objc func titleFont() -> UIKit.UIFont
  @objc func titleColor() -> UIKit.UIColor
  @objc func titleBackgroundColor() -> UIKit.UIColor
  @objc func headersFont() -> UIKit.UIFont
  @objc func headersColor() -> UIKit.UIColor
  @objc func headersBackgroundColor() -> UIKit.UIColor
  @objc func placeholdersFont() -> UIKit.UIFont
  @objc func placeholdersColor() -> UIKit.UIColor
  @objc func textsFont() -> UIKit.UIFont
  @objc func textsColor() -> UIKit.UIColor
  @objc func errorsFont() -> UIKit.UIFont
  @objc func errorsColor() -> UIKit.UIColor
  @objc func backgroundColor() -> UIKit.UIColor
  @objc func resultMessageFont() -> UIKit.UIFont
  @objc func resultMessageColor() -> UIKit.UIColor
  @objc func resultSaveReceiptColor() -> UIKit.UIColor
  @objc func infoTextsFont() -> UIKit.UIFont
  @objc func infoTextsColor() -> UIKit.UIColor
  @objc func buttonTitleFont() -> UIKit.UIFont
  @objc func buttonTitleColor() -> UIKit.UIColor
  @objc func buttonColor() -> UIKit.UIColor
  @objc func buttonCornerRadius() -> CoreFoundation.CGFloat
  @objc func biometricButtonColor() -> UIKit.UIColor
  @objc func successImage() -> UIKit.UIImage?
  @objc func failureImage() -> UIKit.UIImage?
}
extension PortmoneSDKEcom.StyleSource {
  public func titleFont() -> UIKit.UIFont
  public func titleColor() -> UIKit.UIColor
  public func titleBackgroundColor() -> UIKit.UIColor
  public func headersFont() -> UIKit.UIFont
  public func headersColor() -> UIKit.UIColor
  public func headersBackgroundColor() -> UIKit.UIColor
  public func placeholdersFont() -> UIKit.UIFont
  public func placeholdersColor() -> UIKit.UIColor
  public func textsFont() -> UIKit.UIFont
  public func textsColor() -> UIKit.UIColor
  public func errorsFont() -> UIKit.UIFont
  public func errorsColor() -> UIKit.UIColor
  public func backgroundColor() -> UIKit.UIColor
  public func resultMessageFont() -> UIKit.UIFont
  public func resultMessageColor() -> UIKit.UIColor
  public func infoTextsFont() -> UIKit.UIFont
  public func infoTextsColor() -> UIKit.UIColor
  public func buttonTitleFont() -> UIKit.UIFont
  public func buttonTitleColor() -> UIKit.UIColor
  public func buttonColor() -> UIKit.UIColor
  public func biometricButtonColor() -> UIKit.UIColor
}
@objc public protocol PaymentPresenterDelegate {
  @objc func didFinishPayment(bill: PortmoneSDKEcom.Bill?, error: (any Swift.Error)?)
  @objc optional func didFinishPaymentBills(bills: [PortmoneSDKEcom.UBill]?, error: (any Swift.Error)?)
  @available(*, unavailable, renamed: "dismissedSDK")
  @objc optional func didCancelPayment()
  @objc optional func dismissedSDK()
  @objc optional func canceledSDK()
}
@objc public class PaymentPresenter : ObjectiveC.NSObject {
  @objc public init(delegate: any PortmoneSDKEcom.PaymentPresenterDelegate, styleSource: (any PortmoneSDKEcom.StyleSource)? = nil, language: PortmoneSDKEcom.Language, biometricAuth: Swift.Bool = false, customUid: Swift.String? = nil)
  @objc public func presentPaymentByCard(on controller: UIKit.UIViewController, params: PortmoneSDKEcom.PaymentParams, showReceiptScreen: Swift.Bool)
  @objc public func presentCustomPaymentByCard(on controller: UIKit.UIViewController, params: PortmoneSDKEcom.PaymentParams, view: PortmoneSDKEcom.MerchantView)
  @objc public func presentPreauthCard(on controller: UIKit.UIViewController, params: PortmoneSDKEcom.PreauthParams)
  @objc public func presentCustomPreauthCard(on controller: UIKit.UIViewController, params: PortmoneSDKEcom.PreauthParams, view: PortmoneSDKEcom.MerchantView)
  @objc public func presentPreauthCardBill(on controller: UIKit.UIViewController, params: PortmoneSDKEcom.SaveCardTokenBillParams)
  @objc public func presentPaymentByToken(on controller: UIKit.UIViewController, payParams: PortmoneSDKEcom.PaymentParams, tokenParams: PortmoneSDKEcom.TokenPaymentParams, showReceiptScreen: Swift.Bool = true)
  @objc public func presentPaymentBillsByToken(on controller: UIKit.UIViewController, payParams: PortmoneSDKEcom.BillsPaymentParams, tokenParams: PortmoneSDKEcom.TokenPaymentParams)
  @objc public func presentTransferByToken(on controller: UIKit.UIViewController, transferParams: PortmoneSDKEcom.TransferParams, tokenParams: PortmoneSDKEcom.TokenPaymentParams, showReceiptScreen: Swift.Bool = true)
  @objc public func setReturnToDetails(disabled: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Bill : ObjectiveC.NSObject {
  final public let billId: Swift.String?
  public var status: Swift.String
  final public let billAmount: Swift.Double
  public var cardMask: Swift.String?
  final public let commissionAmount: Swift.Double
  public var recieptUrl: Swift.String?
  final public let contractNumber: Swift.String?
  final public let payDate: Foundation.Date?
  final public let payeeName: Swift.String?
  public var token: Swift.String?
  @objc deinit
}
@objc public enum Language : Swift.Int, Swift.RawRepresentable {
  case ukrainian
  case russian
  case english
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public enum Currency : Swift.Int, Swift.RawRepresentable {
  case uah
  case usd
  case eur
  case gbp
  case byn
  case kzt
  case rub
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public enum PaymentType : Swift.Int {
  case payment
  case mobilePayment
  case account
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PaymentFlowType : Swift.Int {
  case byCard
  case byCardAndApplePay
  case byApplePay
  case withoutCVV
  public init(payWithCard: Swift.Bool, payWithApplePay: Swift.Bool, withoutCVV: Swift.Bool)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MerchantViewFlowType : Swift.Int {
  case paymentByCard
  case preauthCard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class StyleSourceModel : ObjectiveC.NSObject, PortmoneSDKEcom.StyleSource {
  @objc open func titleFont() -> UIKit.UIFont
  @objc open func titleColor() -> UIKit.UIColor
  @objc open func titleBackgroundColor() -> UIKit.UIColor
  @objc open func headersFont() -> UIKit.UIFont
  @objc open func headersColor() -> UIKit.UIColor
  @objc open func headersBackgroundColor() -> UIKit.UIColor
  @objc open func placeholdersFont() -> UIKit.UIFont
  @objc open func placeholdersColor() -> UIKit.UIColor
  @objc open func textsFont() -> UIKit.UIFont
  @objc open func textsColor() -> UIKit.UIColor
  @objc open func errorsFont() -> UIKit.UIFont
  @objc open func errorsColor() -> UIKit.UIColor
  @objc open func backgroundColor() -> UIKit.UIColor
  @objc open func resultMessageFont() -> UIKit.UIFont
  @objc open func resultMessageColor() -> UIKit.UIColor
  @objc open func resultSaveReceiptColor() -> UIKit.UIColor
  @objc open func infoTextsFont() -> UIKit.UIFont
  @objc open func infoTextsColor() -> UIKit.UIColor
  @objc open func buttonTitleFont() -> UIKit.UIFont
  @objc open func buttonTitleColor() -> UIKit.UIColor
  @objc open func buttonColor() -> UIKit.UIColor
  @objc open func buttonCornerRadius() -> CoreFoundation.CGFloat
  @objc open func biometricButtonColor() -> UIKit.UIColor
  @objc open func successImage() -> UIKit.UIImage?
  @objc open func failureImage() -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TokenPaymentParams : ObjectiveC.NSObject {
  final public let cardNumberMasked: Swift.String
  final public let tokenData: Swift.String
  final public let credentials: Swift.String
  @objc public init(cardNumberMasked: Swift.String, tokenData: Swift.String, credentials: Swift.String = "")
  public func validate() -> (any Swift.Error)?
  @objc deinit
}
@objc public class TransferParams : ObjectiveC.NSObject {
  final public let attribute2: Swift.String
  final public let attribute3: Swift.String
  final public let attribute4: Swift.String
  final public let attribute5: Swift.String
  final public let billNumber: Swift.String
  public var contractNumber: Swift.String
  public var billAmount: Swift.Double
  final public let payeeId: Swift.String
  public var billCurrency: PortmoneSDKEcom.Currency {
    get
  }
  @objc public init(attribute2: Swift.String = "", attribute3: Swift.String = "", attribute4: Swift.String = "", attribute5: Swift.String = "", billNumber: Swift.String = "", billAmount: Swift.Double, payeeId: Swift.String)
  public func validate() -> (any Swift.Error)?
  @objc deinit
}
extension PortmoneSDKEcom.Language : Swift.Equatable {}
extension PortmoneSDKEcom.Language : Swift.Hashable {}
extension PortmoneSDKEcom.Currency : Swift.Equatable {}
extension PortmoneSDKEcom.Currency : Swift.Hashable {}
extension PortmoneSDKEcom.PaymentType : Swift.Equatable {}
extension PortmoneSDKEcom.PaymentType : Swift.Hashable {}
extension PortmoneSDKEcom.PaymentType : Swift.RawRepresentable {}
extension PortmoneSDKEcom.PaymentFlowType : Swift.Equatable {}
extension PortmoneSDKEcom.PaymentFlowType : Swift.Hashable {}
extension PortmoneSDKEcom.PaymentFlowType : Swift.RawRepresentable {}
extension PortmoneSDKEcom.MerchantViewFlowType : Swift.Equatable {}
extension PortmoneSDKEcom.MerchantViewFlowType : Swift.Hashable {}
extension PortmoneSDKEcom.MerchantViewFlowType : Swift.RawRepresentable {}
